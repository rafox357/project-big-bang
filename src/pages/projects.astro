---
import Layout from '../layouts/Layout.astro';
import ProjectCard from '../components/projects/ProjectCard.astro';
import ProjectFilter from '../components/projects/ProjectFilter.astro';
import { categories } from '../data/projects';
import { fade } from 'astro:transitions';

// Get the selected category from URL params
const { category } = Astro.url.searchParams;

// Get all projects and filter if category is selected
const allProjects = categories.flatMap(cat => 
  cat.projects.map(project => ({
    ...project,
    category: cat.id
  }))
);

const filteredProjects = category 
  ? allProjects.filter(p => p.category === category)
  : allProjects;

// Format categories for the filter component
const formattedCategories = categories.map(cat => ({
  id: cat.id,
  name: cat.name,
  count: cat.projects.length
}));
---

<Layout title="Projects">
  <div class="container mx-auto px-4 py-12">
    <div class="text-center mb-16" transition:animate={fade({ duration: '0.5s' })}>
      <h1 class="text-5xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-500 to-red-500">
        Explore Projects
      </h1>
      <p class="text-xl text-gray-300 max-w-2xl mx-auto">
        Discover our collection of privacy-focused innovations
      </p>
    </div>

    <ProjectFilter 
      categories={formattedCategories} 
      selectedCategory={category} 
    />

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mt-12" 
         transition:animate={fade({ duration: '0.3s' })}>
      {filteredProjects.map(project => (
        <ProjectCard project={project} />
      ))}
    </div>

    {filteredProjects.length === 0 && (
      <div class="text-center py-16 bg-gray-800/50 rounded-2xl mt-8">
        <p class="text-gray-300">No projects found in this category.</p>
        <a href="/projects" class="text-purple-400 hover:text-purple-300 mt-4 inline-block transition-colors">
          View all projects
        </a>
      </div>
    )}
  </div>
</Layout>

<style>
  h1 {
    animation: textGradient 6s ease infinite;
    background-size: 200% 200%;
  }

  @keyframes textGradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .grid {
    animation: fadeIn 0.6s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
